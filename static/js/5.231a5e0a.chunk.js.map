{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","HOC/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","massage","message","Dialogs","state","dialogsPage","dialogElement","dialogs","map","messageElement","messages","isAuth","dialogsItems","onSubmit","values","SendMessage","newMessageBody","maxLength100","maxLengthCreator","AddMessageForm","handleSubmit","Field","component","Textarea","validate","required","placeholder","reduxForm","form","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendNewMessageCreator","Component","RedirectComponent","this","React"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8GCYpMC,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,qBAAKC,UAAS,UAAKC,IAAQC,OAAb,YAAuBD,IAAQE,QAA7C,SACE,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCAjBC,EAJC,SAAAT,GACd,OAAO,qBAAKG,UAAWC,IAAQM,QAAxB,SAAkCV,EAAMW,W,wCCuClCC,EAnCC,SAACZ,GACf,IAAIa,EAAQb,EAAMc,YAEdC,EAAgBF,EAAMG,QAAQC,KAAI,SAACZ,GAAD,OAAY,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAsBN,GAAIG,EAAOH,IAAtBG,EAAOH,OACzFgB,EAAiBL,EAAMM,SAASF,KAAI,SAACN,GAAD,OAAa,cAAC,EAAD,CAASA,QAASA,EAAQA,QAA0BT,GAAIS,EAAQT,IAAxBS,EAAQT,OAgBrG,OAAIF,EAAMoB,OAKR,sBAAKjB,UAAWC,IAAQY,QAAxB,UACE,qBAAKb,UAAWC,IAAQiB,aAAxB,SAAuCN,IACvC,sBAAKZ,UAAWC,IAAQe,SAAxB,UACE,8BAAMD,IACN,cAAC,EAAD,CAAgBI,SAbF,SAACC,GACnBvB,EAAMwB,YAAYD,EAAOE,yBAGF,cAAC,IAAD,CAAUlB,GAAI,YAiBnCmB,EAAeC,YAAiB,KAElCC,EAAiB,SAAC5B,GACpB,OACE,uBAAMsB,SAAUtB,EAAM6B,aAAtB,UACE,8BAAK,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUR,GAAelB,KAAM,iBAAkB2B,YAAY,yBACzG,8BACE,gDAMRP,EAAiBQ,YAAU,CACzBC,KAAM,wBADSD,CAEdR,G,2CCxDCU,EAA6B,SAACzB,GAAD,MAAY,CAC3CO,OAAQP,EAAM0B,KAAKnB,S,QCiBNoB,sBACbC,aAhBsB,SAAC5B,GACvB,MAAO,CACLC,YAAaD,EAAMC,gBAKI,SAAC4B,GAC1B,MAAO,CACLlB,YAAa,SAACC,GACZiB,EAASC,YAAsBlB,UDTL,SAACmB,GAAe,IACxCC,EADuC,uKAGzC,OAAIC,KAAK9C,MAAMoB,OACR,cAACwB,EAAD,eAAeE,KAAK9C,QADG,cAAC,IAAD,CAAUO,GAAI,eAHH,GACbwC,IAAMH,WAQtC,OADqCH,YAASH,EAATG,CAAqCI,KCM7DL,CAGb5B","file":"static/js/5.231a5e0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"massage\":\"Dialogs_massage__3fUKJ\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classes from './../Dialogs.module.css';\n\nconst DialogItem = (props) => {\n  let path = '/dialogs/' + props.id;\n  return (\n    <div className={`${classes.dialog} ${classes.active}`}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from 'react';\nimport classes from './../Dialogs.module.css';\n\n\nconst Message = props => {\n  return <div className={classes.massage}>{props.message}</div>;\n};\n\nexport default Message;\n","import React from 'react';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport classes from './Dialogs.module.css';\nimport {Redirect} from \"react-router\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../helpers/validators/validators\";\n\nconst Dialogs = (props) => {\n  let state = props.dialogsPage;\n\n  let dialogElement = state.dialogs.map((dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\n  let messageElement = state.messages.map((message) => <Message message={message.message} key={message.id} id={message.id} />);\n\n  // let newMessageBody = state.newMessageBody;\n  // let onSendMessageClick = () => {\n  //   props.SendMessage();\n  // };\n  //\n  // let onNewMessageChange = (e) => {\n  //   let body = e.target.value;\n  //   props.updateNewMessageBody(body);\n  // };\n\n  let addNewMessage = (values) => {\n    props.SendMessage(values.newMessageBody);\n  };\n\n  if(!props.isAuth) return <Redirect to={'/login'}/>;\n\n\n\n  return (\n    <div className={classes.dialogs}>\n      <div className={classes.dialogsItems}>{dialogElement}</div>\n      <div className={classes.messages}>\n        <div>{messageElement}</div>\n        <AddMessageForm onSubmit={addNewMessage}/>\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n\nconst maxLength100 = maxLengthCreator(100);\n\nlet AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit }>\n      <div><Field component={Textarea} validate={[required, maxLength100]} name={'newMessageBody'} placeholder='enter your massage'/></div>\n      <div>\n        <button>Send</button>\n      </div>\n    </form>\n  );\n};\n\nAddMessageForm = reduxForm({\n  form: 'dialogAddMessageForm'\n})(AddMessageForm)\n","import React from 'react'\nimport {Redirect} from \"react-router\";\nimport {connect} from \"react-redux\";\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.auth.isAuth,\n})\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if(!this.props.isAuth) return <Redirect to={'/login'}/>;\n      return <Component {...this.props} />\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent);\n  return ConnectedAuthRedirectComponent;\n}","import {connect} from 'react-redux';\nimport {sendNewMessageCreator} from '../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport React from \"react\";\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n//create mapStateToProps\nconst mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\n\n//create mapDispatchToProps\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    SendMessage: (newMessageBody) => {\n      dispatch(sendNewMessageCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}